{
    // Place your mile-be workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }

    "repository layer error handling": {
        "scope": "typescript",
        "prefix": "repoerror",
        "body": [
            "console.error(error);\n",
            "throw new InternalServerError({",
            "    message: (error as Error).message,",
            "    errors: (error as Error).stack,",
            "});"
        ],
        "description": "repository layer error handling"
    },
    "service layer error handling": {
        "scope": "typescript",
        "prefix": "serviceerror",
        "body": [
            "if (",
            "    !(error instanceof InternalServerError) &&",
            "    !(error instanceof ClientError)",
            ") {",
            "    console.error(error);",
            "    throw new InternalServerError({",
            "        message: (error as Error).message,",
            "        errors: (error as Error).stack,",
            "    });",
            "}",
            "throw error;"
        ],
        "description": "service layer error handling"
    },
    "controller layer error handling": {
        "scope": "typescript",
        "prefix": "controllererror",
        "body": [
            "if (",
            "    error instanceof ClientError ||",
            "    error instanceof InternalServerError",
            ") {",
            "    return responseHandler({",
            "        res,",
            "        status: error.code,",
            "        message: error.message,",
            "        errors: error.errors,",
            "    });",
            "}",
            "return responseHandler({",
            "    res,",
            "    status: 500,",
            "    message: \"internal server error\",",
            "    errors: (error as Error).stack,",
            "});"
        ],
        "description": "controller layer error handling"
    }
}
